                                                                                            json
一、介绍
JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）
JSON 是轻量级的文本数据交换格式
JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。
JSON 具有自我描述性，更易理解

JSON 文本格式在语法上与创建 JavaScript 对象的代码相同。

由于这种相似性，无需解析器，JavaScript 程序能够使用内建的 eval() 函数，用 JSON 数据来生成原生的 JavaScript 对象。

JSON 比 XML 更小、更快，更易解析。

JSON-转换为JavaScript对象

与 XML 相同之处
	JSON 是纯文本
	JSON 具有"自我描述性"（人类可读）
	JSON 具有层级结构（值中存在值）
	JSON 可通过 JavaScript 进行解析
	JSON 数据可使用 AJAX 进行传输
	
与 XML 不同之处
	没有结束标签
	更短
	读写的速度更快
	能够使用内建的 JavaScript eval() 方法进行解析
	使用数组
	不使用保留字
	前面提到任何的XML都能够转换成JSON包；


1.简单XML

XML格式：
<person>  
    <name>xiazdong</name>  
    <age>20</age>  
</person> 

JSON格式：


    {  
        "name":"xiazdong",  
        "age":20  
    }  

2.复杂XML
    <section>  
        <title>BOOK</title>  
        <signing>  
            <author name="author-1"/>  
            <book title="book1" price="$11"/>  
        </signing>  
        <signing>  
            <author name="author-2"/>  
            <book title="book2" price="$22"/>  
        </signing>  
    </section>  

XML格式：



JSON格式：


"section":{  
        "title":"BOOK",  
        "signing":[  
        {  
    <span style="white-space:pre">  </span> "author":  
            {  
                "name":"author-1"  
            },  
            "book":  
            {  
                "title":"book1",  
                "price":"$11"  
            }  
        },  
        {  
            "author":  
            {  
                "name":"author-2"  
            },  
            "book":  
            {  
                "title":"book2",  
                "price":"$22"  
            }  
        }     
     ]}  
    } 


实例：
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title> </title>
</head>
<body>
	<h2>JavaScript 创建 JSON 对象</h2>
	<p>
	网站名称: <span id="jname"></span><br /> 
	网站地址: <span id="jurl"></span><br /> 
	网站 slogan: <span id="jslogan"></span><br /> 
</p>
<script>
	var JSONObject= {
    	"name":"xxxx",
    	"url":"www.ybao.org", 
    	"slogan":"学的不仅是技术，更是梦想！"
	};
	document.getElementById("jname").innerHTML=JSONObject.name 
	document.getElementById("jurl").innerHTML=JSONObject.url 
	document.getElementById("jslogan").innerHTML=JSONObject.slogan
</script>
 
</body>
</html>



二、JSON 语法
2.1 JSON数据结构
JSON有两种数据结构：	
  (1)Map，也称为对象；｛....｝
  (2)Array；[......]
  也就是说所有的JSON对象都是要以这些形式表示；


2.1.1.Map
简单的说就是Java中的Map，名称-值对的形式给出，名称和值之间用“：”隔开，两个Map之间用“，”隔开，一般表示形式如下：
{'key1':'value1','key2':'value2'}


2.1.2.Array
就是普通意义上的数组，一般形式如下：
['arr1','arr2','arr3'];	








2.2 JSON语法规则
数据在名称/值对中
数据由逗号分隔
大括号保存对象
中括号保存数组

JSON 名称/值对
  JSON 数据的书写格式是：名称/值对。
  名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：
  "name" : "xxxxx"

 这很容易理解，等价于这条 JavaScript 语句：
 name = "xxxxx"
 
JSON 值
JSON 值可以是：
  数字（整数或浮点数）
  字符串（在双引号中）
  逻辑值（true 或 false）
  数组（在中括号中）
  对象（在大括号中）
  null

JSON 数字
  JSON 数字可以是整型或者浮点型：
  { "age":30 }

JSON 对象
  JSON 对象在大括号（{}）中书写：
  对象可以包含多个名称/值对：

{ "name":"源宝教程" , "url":"www.ybao.org" }
这一点也容易理解，与这条 JavaScript 语句等价：
name = "源宝教程" url = "www.ybao.org"

JSON 数组
JSON 数组在中括号中书写：
  数组可包含多个对象：
{
"sites": [
{ "name":"xxxx" , "url":"www.ybao.org" }, 
{ "name":"google" , "url":"www.google.com" }, 
{ "name":"微博" , "url":"www.weibo.com" }
]
}
在上面的例子中，对象 "sites" 是包含三个对象的数组。每个对象代表一条关于某个网站（name、url）的记录。


JSON 布尔值
JSON 布尔值可以是 true 或者 false：
{ "flag":true }

JSON null
JSON 可以设置 null 值：
{ "ybao":null }

JSON 使用 JavaScript 语法
因为 JSON 使用 JavaScript 语法，所以无需额外的软件就能处理 JavaScript 中的 JSON。
通过 JavaScript，您可以创建一个对象数组，并像这样进行赋值：

实例
var sites = [
    { "name":"ybao" , "url":"www.ybao.org" }, 
    { "name":"google" , "url":"www.google.com" }, 
    { "name":"微博" , "url":"www.weibo.com" }
];
可以像这样访问 JavaScript 对象数组中的第一项（索引从 0 开始）：
sites[0].name;
返回的内容是：
ybao

可以像这样修改数据：
sites[0].name="源宝教程";

 

JSON 文件
JSON 文件的文件类型是 ".json"
JSON 文本的 MIME 类型是 "application/json"





2.3 JSON对象
对象语法
实例
{ "name":"ybao", "alexa":10000, "site":null }

JSON 对象使用在大括号({})中书写。
对象可以包含多个 key/value（键/值）对。
key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。
key 和 value 中使用冒号(:)分割。
每个 key/value 对使用逗号(,)分割。

访问对象值
你可以使用点号（.）来访问对象的值：

实例
var myObj, x; myObj = { "name":"ybao", "alexa":10000, "site":null }; x = myObj.name;
你也可以使用中括号（[]）来访问对象的值：

实例
var myObj, x; myObj = { "name":"ybao", "alexa":10000, "site":null }; x = myObj["name"];

循环对象
你可以使用 for-in 来循环对象的属性：

实例
var myObj = { "name":"ybao", "alexa":10000, "site":null };
for (x in myObj) {
 document.getElementById("demo").innerHTML += x + "<br>";
}

在 for-in 循环对象的属性时，使用中括号（[]）来访问属性的值：

实例
var myObj = { "name":"ybao", "alexa":10000, "site":null };
for (x in myObj) {
  document.getElementById("demo").innerHTML += myObj[x] + "<br>";
}


嵌套 JSON 对象
JSON 对象中可以包含另外一个 JSON 对象：

实例
myObj = { "name":"ybao", "alexa":10000, "sites": {
              "site1":"www.ybao.org", "site2":"m.ybao.org", "site3":"c.ybao.org"
        }
}
你可以使用点号(.)或者中括号([])来访问嵌套的 JSON 对象。

实例
x = myObj.sites.site1; // 或者 x = myObj.sites["site1"];

修改值
你可以使用点号(.)来修改 JSON 对象的值：

实例
myObj.sites.site1 = "www.google.com";
你可以使用中括号([])来修改 JSON 对象的值：

实例
myObj.sites["site1"] = "www.google.com";

删除对象属性
我们可以使用 delete 关键字来删除 JSON 对象的属性：

实例
delete myObj.sites.site1;
你可以使用中括号([])来删除 JSON 对象的属性：

实例
delete myObj.sites["site1"]








2.4 JSON 数组
数组作为 JSON 对象

实例
[ "Google", "Ybao", "Taobao" ]
JSON 数组在中括号中书写。
JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。
JavaScript 中，数组值可以是以上的 JSON 数据类型，也可以是 JavaScript 的表达式，包括函数，日期，及 undefined。

JSON 对象中的数组
对象属性的值可以是一个数组：

实例
{ "name":"网站", "num":3, "sites":[ "Google", "Ybao", "Taobao" ] }
我们可以使用索引值来访问数组：

实例
x = myObj.sites[0];

循环数组
你可以使用 for-in 来访问数组：

实例
for (i in myObj.sites) { x += myObj.sites[i] + "<br>"; }

你也可以使用 for 循环：
实例
for (i = 0; i < myObj.sites.length; i++) { x += myObj.sites[i] + "<br>"; }

嵌套 JSON 对象中的数组
JSON 对象中数组可以包含另外一个数组，或者另外一个 JSON 对象：

实例
myObj = { "name":"网站", "num":3, "sites": [ { "name":"Google", "info":[ "Android", "Google 搜索", "Google 翻译" ] }, { "name":"Ybao", "info":[ "教程", "工具", "微信" ] }, { "name":"Taobao", "info":[ "淘宝", "网购" ] } ] }
我们可以使用 for-in 来循环访问每个数组：

实例
for (i in myObj.sites) { x += "<h1>" + myObj.sites[i].name + "</h1>";
for (j in myObj.sites[i].info) { x += myObj.sites[i].info[j] + "<br>"; } }

修改数组值
你可以使用索引值来修改数组值：
实例
myObj.sites[1] = "Github";


删除数组元素
我们可以使用 delete 关键字来删除数组元素：
实例
delete myObj.sites[1];







三、JSON使用
3.1 JSON.parse() 反序列化
语法
解析数据
JSON 通常用于与服务端交换数据。
在接收服务器数据时一般是字符串。
我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。

语法
JSON.parse(text[, reviver])
参数说明：
text:必需， 一个有效的 JSON 字符串。
reviver: 可选，一个转换结果的函数， 将为对象的每个成员调用此函数。

JSON 解析实例
例如我们从服务器接收了以下数据：
{ "name":"ybao", "alexa":10000, "site":"www.ybao.org" }

我们使用 JSON.parse() 方法处理以上数据，将其转换为 JavaScript 对象：
var obj = JSON.parse('{ "name":"ybao", "alexa":10000, "site":"www.ybao.org" }');

解析完成后，我们就可以在网页上使用 JSON 数据了：
实例
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title></title>
</head>
<body>

<h2>从 JSON 对象中创建 JavaScript 对象</h2>

<p id="demo"></p>

<script>
	var obj = JSON.parse('{ "name":"ybao", "alexa":10000, "site":"www.ybao.org" }');
	document.getElementById("demo").innerHTML = obj.name + "：" + obj.site;
</script>

</body>
</html>


从服务端接收 JSON 数据
我们可以使用 AJAX 从服务器请求 JSON 数据，并解析为 JavaScript 对象。

实例
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title></title>
</head>
<body>

<h2>使用 XMLHttpRequest 来获取文件内容</h2>
<p>文件内容是标准的 JSON 格式，可以使用 JSON.parse 方法将其转换为 JavaScript 对象。</p>

<p id="demo"></p>

<script>

	var xmlhttp = new XMLHttpRequest();
	xmlhttp.onreadystatechange = function() {
   	 	if (this.readyState == 4 && this.status == 200) {
       		 	myObj = JSON.parse(this.responseText);
        			document.getElementById("demo").innerHTML = myObj.name;
    		}
	};
	xmlhttp.open("GET", "/demo/ajax/json_demo.txt", true);
	xmlhttp.send();

</script>

<p>查看 JSON 文件数据 <a href="/demo/ajax/json_demo.txt" target="_blank">json_demo.txt</a></p>

</body>
</html>

查看服务端数据： json_demo.txt



异常
解析数据
JSON 不能存储 Date 对象。
如果你需要存储 Date 对象，需要将其转换为字符串。
之后再将字符串转换为 Date 对象。

实例
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title></title>
</head>
<body>

<h2>将字符串转换为 Date 对象。</h2>

<p id="demo"></p>

<script>

var text = '{ "name":"ybao", "initDate":"2013-12-14", "site":"www.ybao.org"}';
var obj = JSON.parse(text);
obj.initDate = new Date(obj.initDate);

document.getElementById("demo").innerHTML = obj.name + "创建日期: " + obj.initDate;

</script>

</body>
</html>
 



我们可以启用 JSON.parse 的第二个参数 reviver，一个转换结果的函数，对象的每个成员调用此函数。

实例
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title></title>
</head>
<body>

<h2>字符串转换为 Date 对象</h2>

<p id="demo"></p>

<script>

var text = '{ "name":"Ybao", "initDate":"2013-12-14", "site":"www.ybao.org"}';
var obj = JSON.parse(text, function (key, value) {
	if (key == "initDate") {
	    return new Date(value);
	} else {
	    return value;
}});

document.getElementById("demo").innerHTML = obj.name + "创建日期：" + obj.initDate;

</script>

</body>
</html>

 


解析函数
JSON 不允许包含函数，但你可以将函数作为字符串存储，之后再将字符串转换为函数。

实例
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title></title>
</head>
<body>

<h2>字符串转换为函数</h2>

<p id="demo"></p>

<script>

var text = '{ "name":"Ybao", "alexa":"function () {return 10000;}", "site":"www.ybao.org"}';
var obj = JSON.parse(text);
obj.alexa = eval("(" + obj.alexa + ")");

document.getElementById("demo").innerHTML = obj.name + " Alexa 排名：" + obj.alexa(); 

</script>

</body>
</html>

不建议在 JSON 中使用函数。


浏览器支持
主流浏览器都支持 JSON.parse() 函数：
Firefox 3.5
Internet Explorer 8
Chrome
Opera 10
Safari 4











3.2 JSON.stringify() 序列化
JSON 通常用于与服务端交换数据。
在向服务器发送数据时一般是字符串。
我们可以使用 JSON.stringify() 方法将 JavaScript 对象转换为字符串。

语法
JSON.stringify(value[, replacer[, space]])

参数说明：
value:
必需， 一个有效的 JSON 字符串。

replacer:
可选。用于转换结果的函数或数组。
如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：""。
如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。当 value 参数也为数组时，将忽略 replacer 数组。

space:
可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 有可以使用非数字，如：\t。



JavaScript 对象转换
例如我们向服务器发送以下数据：
var obj = { "name":"ybao", "alexa":10000, "site":"www.ybao.org"};

我们使用 JSON.stringify() 方法处理以上数据，将其转换为字符串：
var myJSON = JSON.stringify(obj);


myJSON 为字符串。
我们可以将 myJSON 发送到服务器：
实例
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title></title>
</head>
<body>

<h2>将 JavaScript 对象转换Wie JSON 字符串</h2>

<p id="demo"></p>

<script>

var obj = { "name":"ybao", "alexa":10000, "site":"www.ybao.org"};
var myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;

</script>

</body>
</html>

 


JavaScript 数组转换
我们也可以将 JavaScript 数组转换为 JSON 字符串：

实例
var arr = [ "Google", "Ybao", "Taobao", "Facebook" ]; var myJSON = JSON.stringify(arr);



myJSON 为字符串。
我们可以将 myJSON 发送到服务器：
实例
var arr = [ "Google", "Ybao", "Taobao", "Facebook" ];
var myJSON = JSON.stringify(arr);
document.getElementById("demo").innerHTML = myJSON;


异常
解析数据
JSON 不能存储 Date 对象。
JSON.stringify() 会将所有日期转换为字符串。
实例
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title></title>
</head>
<body>

<h2>JSON.stringify 将 Date 对象转换为字符串</h2>

<p id="demo"></p>

<script>

var obj = { "name":"Ybao", "initDate":new Date(), "site":"www.ybao.org"};
var myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;

</script>

</body>
</html>

之后你可以再将字符串转换为 Date 对象。




解析函数
JSON 不允许包含函数，JSON.stringify() 会删除 JavaScript 对象的函数，包括 key 和 value。
实例
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title></title>
</head>
<body>

<h2>JSON.stringify 将删除对象中的函数</h2>

<p id="demo"></p>

<script>

var obj = { "name":"Ybao", "alexa":function () {return 10000;}, "site":"www.ybao.org"};
var myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;

</script>

</body>
</html>




我们可以在执行 JSON.stringify() 函数前将函数转换为字符串来避免以上问题的发生：
实例
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title></title>
</head>
<body>

<h2>JSON.stringify 将移除对象中的函数</h2>

<p>我们可以在执行 JSON.stringify() 函数前将函数转换为字符串来保留函数。</p>

<p id="demo"></p>

<script>

var obj = { "name":"Ybao", "alexa":function () {return 10000;}, "site":"www.ybao.org"};
obj.alexa = obj.alexa.toString();
var myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;

</script>

</body>
</html>

不建议在 JSON 中使用函数。



浏览器支持
主流浏览器都支持 JSON.stringify() 函数：
Firefox 3.5
Internet Explorer 8
Chrome
Opera 10
Safari 4





3.3 JSON 文本转换 eval
把 JSON 文本转换为 JavaScript 对象
JSON 最常见的用法之一，是从 web 服务器上读取 JSON 数据（作为文件或作为 HttpRequest），将 JSON 数据转换为 JavaScript 对象，然后在网页中使用该数据。
为了更简单地为您讲解，我们使用字符串作为输入进行演示（而不是文件）。

JSON 实例 - 来自字符串的对象
创建包含 JSON 语法的 JavaScript 字符串：

var txt = '{ "sites" : [' + '{ "name":"教程" , "url":"www.ybao.org" },' + '{ "name":"google" , "url":"www.google.com" },' + '{ "name":"微博" , "url":"www.weibo.com" } ]}';

由于 JSON 语法是 JavaScript 语法的子集，JavaScript 函数 eval() 可用于将 JSON 文本转换为 JavaScript 对象。
eval() 函数使用的是 JavaScript 编译器，可解析 JSON 文本，然后生成 JavaScript 对象。必须把文本包围在括号中，这样才能避免语法错误：
var obj = eval ("(" + txt + ")");


在网页中使用 JavaScript 对象：
实例
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title></title>
</head>
<body>
<h2>从 JSON 字符串中创建对象</h2>
<p>
网站名: <span id="name"></span><br> 
网站地址: <span id="url"></span><br> 
</p> 
<script>
var txt = '{ "sites" : [' +
'{ "name":"教程" , "url":"www.ybao.org" },' +
'{ "name":"google" , "url":"www.google.com" },' +
'{ "name":"微博" , "url":"www.weibo.com" } ]}';

var obj = eval ("(" + txt + ")");

document.getElementById("name").innerHTML=obj.sites[0].name 
document.getElementById("url").innerHTML=obj.sites[0].url 
</script>
</body>
</html>

 

4.JSON. parse()再还原成JavaScript 值。

1.参数的含义

JSON . stringify(value[，replacer[, space]])

value:必选参数。被变换的JavaScript 值，一般是对象或数组。

replacer:可以省略。有两种选择:函数或数组: 

  如果是函数，则每一 组名称/值对都会调用此函数，该函数返回一个值，作为名称的值变换到结果字符串
中，如果返回undefined, 则该成员被忽略。

  如果是数组，则只有数组中存在名称才能够被转换，日转换后顺序与数组中的值保持致。
space:可以省略。这是为了排版、方便阅读而存在的。可以在JSON字符串中添加空白或制表符等。


4.2. value 用法





4.3.replace用法








4.4.space用法

    //1.JSON . stringify(value[，replacer[, space]])
    var obj = {
                name:"Geoff Lui",
                age:26,
                a: undefined,
                // f: function(){

                // },
                // b: [function(){}]
                b:3,
                c:4,
                d:5,
    
    
    };
    console.log(obj);

    //var jsonstr = JSON.stringify(obj,fun);
    
    var jsonstr = JSON.stringify(obj,["a","b","c","d"],"\t");

    // 2. value 用法
   function fun(name,value){
        if(name == "age"){
            value = 14;
            return value;
        }
    }

    console.log(jsonstr);

    // {
    //     name:"Geoff",
    //     age:26
    // }







JSON 解析器
  eval() 函数可编译并执行任何 JavaScript 代码。这隐藏了一个潜在的安全问题。
  JSON.parse()
  使用第三方jquery


使用 JSON 解析器将 JSON 转换为 JavaScript 对象是更安全的做法。JSON 解析器只能识别 JSON 文本，而不会编译脚本。
在浏览器中，这提供了原生的 JSON 支持，而且 JSON 解析器的速度更快。
较新的浏览器和最新的 ECMAScript (JavaScript) 标准中均包含了原生的对 JSON 的支持。

Web 浏览器支持	       Web 软件支持
Firefox (Mozilla) 3.5       jQuery
Internet Explorer 8         ahoo UI
Chrome                          Prototype
Opera 10                        Dojo
Safari 4                           ECMAScript 1.5



5.json与xml转换
5.1下载相关文件
Jquery.json2xml.js
Jquery.xml2json.js



5.2xml字符串转换为json对象
$.xml2json(str);





5.3json字符串转换为xml对象
$.json2xml(obj);









6.Ajax和json

6.1Ajax是什么
AJAX，全称Asynchronous JavaScript and XML,即“异步的JavaScript 和XML”"， 一 般写作Ajax.
Ajax能够与服务器交换少量数据，从而异步地更新部分网页。
并步,指的是当Ajax执行交换数据的操作时，其他的操作仍然可以执行。
一个最常见的应用是:打开百度或谷歌首页，当输入文字后，搜索栏下方会显示出几个建议的搜索词。这正是
Ajax的应用,

6.2.创建和使用Ajax
创建Ajax 对象要考虑浏览器的版本问题，主要分为两大类: IE7+/Chrome/Firefox/.. 和IE6/IE5..
function CreateXHR(){
	if (window . XMLHt tpRequest )
	//对浏览器IE7+, Firefox, Chrome, opera, Safari
	return new XMLHttpRequest();
	}else
	{
		//对浏览器IE6,IE5
		return new ActiveXObject("Micrsoft.XMLHTTP")

	}
6.3服务器的安装


xmlhttp . open("GET"，"test . json" ,true);
xm1http . send();

xmlhttp . onreadystatechange = function(){
	if ( xm1http . readyState == 4 && xm1http.status == 200){
		var jsonstr = xm1http. responseText ;
		console.1og( jsonstr);
	}
}
其中，xmlhttp.readyState 存有XMLHttpRequest 的状态，有五个值:

0:请求未初始化
1:服务器连接已建立
2:请求已接收
3:请求处理中
4:请求已完成，且响应已就绪

xmlhttp. status的值为请求结果，200表示“OK"， 404表示未找到页面。
获取来自服务器的响应，可使用XMLHttpRequest 对象的responseText 或responseXML
属性，前者是以字符中形式，后者是以XML形式。






7.GeoJson和TopoJson
GeoJSON和TopoJSON是符合JSON语法规则的两种数据格式，用于表示地理信息。

7.1. GeOJSON
GeoJSON是用于描述地理空间信息的数据格式。GeoJSON

不是-种新的格式， 其语法规范是符合JSON
格式的，只不过对其名称进行了规范，专J用于表示地理信息。

GeoJSON的最外层是一个单独的对象(object) 。这个对象可表示:
  几何体(Geometry)a
  特征(Feature) 
  特征集合(FeatureCollection)

最外层的GeOJSON里可能包含有很多子对象，每一个GeOJSON 对象都有一个type
属性，表示对象的类型，type的值必须是下面之一。
Point:点。
Multipoint:多点。
LineStr ing:线。
MultilineString:多线。
Pol weon:面


例子：
点对象：
{
"type":"Point",
"coordinates":[-105,39]
}

线对象：
{
"type":"LineString",
"coordinates":[[-105,39],[107,38]]
}


由以上格式可以发现，每一个对象都有一个成员变量coordinates。如果type 的值为
Point、
Multipoint、LineString、 MultiLinestring、 Polygon、 Multipolygon

之一，则该对象必须有变量coordinates.
如果type 的值为GeometryCollection ( 几何体集合)，那么该对象必须有变量
geometries,其值是一个数组，数组的每一项都是 一个GeoJSON的几何对象。例如:

{
	type":"GeometryCollection",
	"geometries": [
		{
			"type": "Point"，
			"coordinates":[ 100，40 ]
		},
		{
			"type": "LineString"，
			"coordinates": [ [100, 30], [100, 35] ]
		}
	]
}



	
如果type的值为Feature (特征)，那么此特征对象必须包含有变量
geometry,表示几何体，geometry 的值必须是几何体对象。此特征对象还包含有一一个
properties,表示特性，properties 的值可以是任意JSON对象或null。 例如:
{
	"type": "Feature",
	"properties": {
	"name":"北京"
	},
	"geometry": {
		type":"Point",
		"coordinates": [116. 3671875, 39.977120098439634]
	}
}
如果type的值为FeatureCollection (特征集合)，则该对象必须有一个名称为
features的成员。features 的值是一个数组，数组的每一项 都是一个特征对象。

7.2TopoJson

TopoJSON是GeoJSON 按拓扑学编码后的扩展形式，是由D3的作者Mike Bostock
制定的。相比GeoJSON 直接使用Polygon、 Point
之类的几何体来表示图形的方法，TopOJSON
中的每一个几何体都是通过将共享边(被称为arcs)整合后组成的。
TopoJSON消除了冗余，文件大小缩小了80%， 因为:
边界线只记录一次(例如广西和广东的交界线 只记录一次)。
地理坐标使用整数，不使用浮点数。


7.3在线工具
http://geojson.io/
